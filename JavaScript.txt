자바스크립트
> 가장 중요한 것: 입력 출력
    > 자료형을 배우는 이유: 어떤 형이 들어오는지, 어떻게 내보내야할지 판단하기 위해
> 표현식
    > 문장: 표현식 하나 이상 모일 경우, 마지막 종결 의미로 세미콜론!
        - ex) let name = "최" + "서" + "연";
        - ex) 10 + 20 + 30 +2;
        - ex) console.log("Hello World....!");
        *다음에 다른 명령문이 오면 보통 알기는 함.
> 키워드(pre-defined)
    > break else 등등 
> 식별자
    > 이름 규칙
        > 키워드 안됨
        > 특수 문자는 _와 $만 허용
        > 숫자로 시작 안됨
        > 공백은 입력하면 안됨
    > 사용 규칙
        > 생성자 함수는 항상 대문자로 시작
        > 변수, 함수, 속성, 메소드의 이름은 항상 소문자로 시작
        > 여러 단어로 된 식별자는 각 단어의 첫 글자를 대문자로 함
> 주석
    > 한줄 처리 => //주석 | 프로그램의 제목/함수 제목 등
    > 여러 줄 주석 처리 => /*
                            주석
                            주석
                          */        | 어려웠던 부분/꼭 기억해야하는 사항/디버깅 포인트 등
> 출력 메소드
    > console 객체의 log() 메소드 사용: console.log() 메소드
>REPL을 사용한 출력
    > c:\> node
        > "안녕" + "하세요"
> 숫자: 가장 기본적인 자료형
    > ex) console.log(52) console.log(52.745)
> 연산자 우선 순위
    > * / % 우선 + - 
> 문자열
    > 문자의 집합
    > 큰따옴표 작은따음표 사용
        > but 문자 중 강조(""나 '')을 하려면 사용한 이전에 사용한 것과 다르게 사용해야함.
            > ex) console.log("This is 'String'")
            > ex) console.log('This is "String"')
    > 이스케이프 문자  
        > 따옴표를 문자 그대로 사용 가능
        > 문자열 줄바꿈 할 경우
            > ex) \" \' \n(enter) \t(tap) \\(역슬래시)
    > 문자열 합하기
        > ex) console.log("가나" + "다라" + "마바" +"사") | 각 문자열 사이를 ' '로 띄워야함
    > 문자 선택 연산자
        > 문자열[숫자]
            >ex) console.log("안녕하세요"[1]) >> 녕
    > 템플릿 문자열: [ECMAScript6]
        > `(역 작은따옴표)
        > 이 안에 ${}로 표현식을 사용 가능
            > ex) `52 + 273 = ${52 + 273}`
                >> `52 + 273 = 352`
            > ex) `올해는 ${new Date().getFullYear()}년입니다.`
                >> `올해는 2021년입니다.`
> 불
    > 참과 거짓을 표현(true == 1, false == 0)
    > 비교 연산자
        > == 같다
        > != 다르다
        > > 왼쪽 피연산자가 크다
        > < 오른쪽 피연산자가 크다
        > >= 왼쪽 피연사자가 크거나 같다
        > <= 오른쪽 피연사자가 크거나 같다
        > 문자열 비교시 => 사전 순서 (가마 < 하마)
    > 논리 연산자
        > ! 부정 연산자(not)
        > || 논리합 연산자(or)  | 둘다 flase가 언제인지
        > && 논리 곱 연산자(and)| 둘다 true가 언제인지
    > 논리 연산자가 많이 사용되는 부분은 '범위 판단'
        > ex) 30>20>10
             (30 > 20) > 10
             true > 10
             1 > 10             | 자동 형변환(불 > 숫자)
             false
             >> 비교 연산자가 여러 개 있을 때 왼쪽부터 차례대로 연산하며 발생하는 문제
    > 논리 연산자 사용 : 법위를 사용하기 위해
        > ex) x<3 || 8<x
        > ex) 3<x && x<8
> 변수: 값을 저장할 때 사용하는 식별자, 변수 선언 후 변수에 값을 할당
    > 변수 선언 => let (식별자);
        > 변수 pi 선언 => let pi;
                         undefined
        > 변수 pi 값을 할당 => pi = 3.142592;
        > 변수 초기화 => let pi = 3.1241592;
                         undefined
> 복합 대입 연산자가 
    > += 덧셈 후 대입
    > -= 뺄셈 후 대입
    > *= 곱셈 후 대입
    > /= 나눗셈 후 대입

    > += 문자열 연결 후 대입|ex) "안녕" + "하세요";
> 증감 연산자
    > 변수++: 변수를 사용하고 +1(후위)
    > ++변수: +1 후 변수 사용   (전위)
    > 변수--: 변수를 사용하고 -1(후위)
    > --변수: -1 후 변수 사용   (전위)
> 자료형 확인 연산자
    > typeof(대상) | ex) typeof(-10)
    > 여섯 가지 자료형
        > string: 문자열
        > number: 숫자
        > boolean: 불
        > function: 함수
        > object: 객체
        > undefined: 선언만 하고 할당을 하지 않은 것
> 강제 자료형 변환
    > Number(): 숫자로 자료형 변환
    > String(): 문자열로 자료형 변환
    > Boolean(): 불로 자료형 변환
        >> 0, NaN, ""(빈 문자열), null, undefined 는 false 변환

    > console.log(Number("안녕하세요")); => NaN
        >> "안녕하세요"를 숫자로 변환했지만, 숫자로 할 수 없는...
        >> NaN은 숫자형임
        >> NaN은 무조건적으로 다름(NaN == NaN => false)
        >> isNaN(): NaN인지 판별하기 위해 사용
> 자동 자료형 변환
    > 숫자와 문자열 자료형 자동 변환
        > 숫자와 문자열에 +연산자를 적용하면 자동으로 숫자가 문자열이 됨.
            >> "52" + 273 => 52273
            >> 52 + "273" => 52273
            >> "52" + "273" => 52273
            >> 52 + 273 => 325
    > 불 자료형 자동 변환
        > !연사자를 두 번 사용해 Boolean() 함수를 사용하는 것과 같은 효과 줌
> 일치 연산자
    > ===: 자료형과 값이 같은지 비교
    > !==: 자료형과 값이 다른지 비교

    >> 52 == '52' => true   (자동 형변환)
    >> 52 === '52' => false (자동 형변환 X)
    >> 0 == '' => true      (자동 형변환)
    >> 0 === '' => false    (자동 형변환 X)
> 상수: 항상 같은 수, 변경할 수 없음
    > const con = " 변경 불가";
      con = ""; // 오류
